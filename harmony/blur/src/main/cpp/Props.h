
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsH.js
 */
#pragma once

#include <react/renderer/components/view/ViewProps.h>
#include <react/renderer/core/PropsParserContext.h>

namespace facebook::react {

enum class RTNBlurBlurStyle {
    Thin,
    Regular,
    Thick,
    BackgroundThin,
    BackgroundRegular,
    BackgroundThick,
    BackgroundUltraThick,
    None,
    ComponentUltraThin,
    ComponentThin,
    ComponentRegular,
    ComponentThick,
    ComponentUltraThick
};

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RTNBlurBlurStyle &result) {
  auto string = (std::string)value;
  if (string == "thin") { result = RTNBlurBlurStyle::Thin; return; }
  if (string == "regular") { result = RTNBlurBlurStyle::Regular; return; }
  if (string == "thick") { result = RTNBlurBlurStyle::Thick; return; }
  if (string == "backgroundThin") { result = RTNBlurBlurStyle::BackgroundThin; return; }
  if (string == "backgroundRegular") { result = RTNBlurBlurStyle::BackgroundRegular; return; }
  if (string == "backgroundThick") { result = RTNBlurBlurStyle::BackgroundThick; return; }
  if (string == "backgroundUltraThick") { result = RTNBlurBlurStyle::BackgroundUltraThick; return; }
  if (string == "none") { result = RTNBlurBlurStyle::None; return; }
  if (string == "componentUltraThin") { result = RTNBlurBlurStyle::ComponentUltraThin; return; }
  if (string == "componentThin") { result = RTNBlurBlurStyle::ComponentThin; return; }
  if (string == "componentRegular") { result = RTNBlurBlurStyle::ComponentRegular; return; }
  if (string == "componentThick") { result = RTNBlurBlurStyle::ComponentThick; return; }
  if (string == "componentUltraThick") { result = RTNBlurBlurStyle::ComponentUltraThick; return; }
  abort();
}

static inline std::string toString(const RTNBlurBlurStyle &value) {
  switch (value) {
    case RTNBlurBlurStyle::Thin: return "thin";
    case RTNBlurBlurStyle::Regular: return "regular";
    case RTNBlurBlurStyle::Thick: return "thick";
    case RTNBlurBlurStyle::BackgroundThin: return "backgroundThin";
    case RTNBlurBlurStyle::BackgroundRegular: return "backgroundRegular";
    case RTNBlurBlurStyle::BackgroundThick: return "backgroundThick";
    case RTNBlurBlurStyle::BackgroundUltraThick: return "backgroundUltraThick";
    case RTNBlurBlurStyle::None: return "none";
    case RTNBlurBlurStyle::ComponentUltraThin: return "componentUltraThin";
    case RTNBlurBlurStyle::ComponentThin: return "componentThin";
    case RTNBlurBlurStyle::ComponentRegular: return "componentRegular";
    case RTNBlurBlurStyle::ComponentThick: return "componentThick";
    case RTNBlurBlurStyle::ComponentUltraThick: return "componentUltraThick";
  }
}
enum class RTNBlurColorMode { System, Light, Dark };

static inline void fromRawValue(const PropsParserContext& context, const RawValue &value, RTNBlurColorMode &result) {
  auto string = (std::string)value;
  if (string == "system") { result = RTNBlurColorMode::System; return; }
  if (string == "light") { result = RTNBlurColorMode::Light; return; }
  if (string == "dark") { result = RTNBlurColorMode::Dark; return; }
  abort();
}

static inline std::string toString(const RTNBlurColorMode &value) {
  switch (value) {
    case RTNBlurColorMode::System: return "system";
    case RTNBlurColorMode::Light: return "light";
    case RTNBlurColorMode::Dark: return "dark";
  }
}

class RTNBlurProps final : public ViewProps {
 public:
  RTNBlurProps() = default;
  RTNBlurProps(const PropsParserContext& context, const RTNBlurProps &sourceProps, const RawProps &rawProps);

#pragma mark - Props

  int blurAmount{};
  RTNBlurBlurStyle blurStyle{RTNBlurBlurStyle::Thick};
  RTNBlurColorMode colorMode{RTNBlurColorMode::Dark};
};

} // namespace facebook::react
